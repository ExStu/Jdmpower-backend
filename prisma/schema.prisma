generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  phone    String
  password String

  isAdmin Boolean @default(false) @map("is_admin")

  name       String
  surname    String
  middleName String?

  avatarPath String @map("avatar_path")

  orders    Order[]
  reviews   Review[]
  favorites Product[]
}

model Currency {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String @unique
  value Float
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name            String
  slug            String
  sku             String?  @unique
  description     String?
  price           Float?
  images          String[]
  inStock         Boolean?
  discount        Int?
  discountedPrice Float?
  universal       Boolean?

  orderItems OrderItem[]
  reviews    Review[]
  generation Generation[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  manufacture   Manufacture? @relation(fields: [manufactureId], references: [id])
  manufactureId Int?         @map("manufacture_id")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
}

model Car {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String  @unique
  slug  String  @unique
  image String?

  models Model[]
}

model Model {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String  @unique
  slug  String  @unique
  image String?

  car   Car @relation(fields: [carId], references: [id])
  carId Int @map("car_id")

  generations Generation[]
}

model Generation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name         String?
  slug         String?
  image        String?
  chassis      String?
  engine       String?
  engineVolume String?
  yearFrom     String?
  yearTo       String?

  model   Model @relation(fields: [modelId], references: [id])
  modelId Int   @map("model_id")

  products Product[]
}

model News {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  image       String?
  title       String
  description String
  slug        String
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Manufacture {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String  @unique
  slug  String  @unique
  image String?

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int?
  text   String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items             OrderItem[]
  total             Int
  totalWithDiscount Int?
  email             String
  phone             String?
  firstName         String
  lastName          String
  middleName        String?
  deliveryTc        Boolean?
  desiredTc         String?
  city              String?
  tcAddress         String?
  passportSeries    String?
  passportNumber    String?
  deliveryToDoor    Boolean?
  address           String?
  hardWrapRequired  Boolean?
  message           String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("Order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
