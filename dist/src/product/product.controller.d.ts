import { GetAllProductDto } from "./dto/get-all.product.dto";
import { ProductDto } from "./dto/product.dto";
import { ProductService } from "./product.service";
declare class GetSimilarArgDto {
    id: number;
    chosenGenId?: number;
}
export declare class ProductController {
    private readonly productService;
    constructor(productService: ProductService);
    getAll(queryDto: GetAllProductDto): Promise<{
        products: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            sku: string;
            description: string;
            price: number;
            images: string[];
            inStock: boolean;
            discount: number;
            discountedPrice: number;
            universal: boolean;
            categoryId: number;
            manufactureId: number;
            userId: number;
            orderItems: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                quantity: number;
                orderId: number;
                productId: number;
            }[];
            reviews: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                rating: number;
                text: string;
                userId: number;
                productId: number;
            }[];
            generation: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                name: string;
                slug: string;
                image: string;
                chassis: string;
                engine: string;
                engineVolume: string;
                yearFrom: string;
                yearTo: string;
                modelId: number;
            }[];
            category: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                name: string;
                slug: string;
            };
            manufacture: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                name: string;
                slug: string;
                image: string;
            };
            user: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                phone: string;
                password: string;
                isAdmin: boolean;
                name: string;
                surname: string;
                middleName: string;
                avatarPath: string;
            };
            _count: {
                orderItems: number;
                reviews: number;
                generation: number;
                category: number;
                manufacture: number;
                user: number;
            };
        }[];
        totalLength: number;
        orderBy: import(".prisma/client").Prisma.ProductOrderByWithRelationInput;
        pageSize: number;
        pageNumber: number;
        minPrice: number;
        maxPrice: number;
    }>;
    getProductsBySearch(searchTerm: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
        orderItems: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            orderId: number;
            productId: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            text: string;
            userId: number;
            productId: number;
        }[];
        generation: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
            chassis: string;
            engine: string;
            engineVolume: string;
            yearFrom: string;
            yearTo: string;
            modelId: number;
        }[];
        category: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
        };
        manufacture: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
        };
        user: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            password: string;
            isAdmin: boolean;
            name: string;
            surname: string;
            middleName: string;
            avatarPath: string;
        };
        _count: {
            orderItems: number;
            reviews: number;
            generation: number;
            category: number;
            manufacture: number;
            user: number;
        };
    }[]>;
    getSimilar(dto: GetSimilarArgDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
        orderItems: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            orderId: number;
            productId: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            text: string;
            userId: number;
            productId: number;
        }[];
        generation: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
            chassis: string;
            engine: string;
            engineVolume: string;
            yearFrom: string;
            yearTo: string;
            modelId: number;
        }[];
        category: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
        };
        manufacture: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
        };
        user: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            password: string;
            isAdmin: boolean;
            name: string;
            surname: string;
            middleName: string;
            avatarPath: string;
        };
        _count: {
            orderItems: number;
            reviews: number;
            generation: number;
            category: number;
            manufacture: number;
            user: number;
        };
    }[]>;
    getProduct(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
        orderItems: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            orderId: number;
            productId: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            text: string;
            userId: number;
            productId: number;
        }[];
        generation: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
            chassis: string;
            engine: string;
            engineVolume: string;
            yearFrom: string;
            yearTo: string;
            modelId: number;
        }[];
        category: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
        };
        manufacture: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
        };
        user: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            password: string;
            isAdmin: boolean;
            name: string;
            surname: string;
            middleName: string;
            avatarPath: string;
        };
        _count: {
            orderItems: number;
            reviews: number;
            generation: number;
            category: number;
            manufacture: number;
            user: number;
        };
    }>;
    getProductsByCategory(categorySlug: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
        orderItems: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            orderId: number;
            productId: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            text: string;
            userId: number;
            productId: number;
        }[];
        generation: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
            chassis: string;
            engine: string;
            engineVolume: string;
            yearFrom: string;
            yearTo: string;
            modelId: number;
        }[];
        category: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
        };
        manufacture: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
        };
        user: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            password: string;
            isAdmin: boolean;
            name: string;
            surname: string;
            middleName: string;
            avatarPath: string;
        };
        _count: {
            orderItems: number;
            reviews: number;
            generation: number;
            category: number;
            manufacture: number;
            user: number;
        };
    }[]>;
    getProductsByManufacture(manufactureSlug: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
        orderItems: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            orderId: number;
            productId: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            text: string;
            userId: number;
            productId: number;
        }[];
        generation: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
            chassis: string;
            engine: string;
            engineVolume: string;
            yearFrom: string;
            yearTo: string;
            modelId: number;
        }[];
        category: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
        };
        manufacture: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
        };
        user: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            password: string;
            isAdmin: boolean;
            name: string;
            surname: string;
            middleName: string;
            avatarPath: string;
        };
        _count: {
            orderItems: number;
            reviews: number;
            generation: number;
            category: number;
            manufacture: number;
            user: number;
        };
    }[]>;
    getProductsByGeneration(generationSlug: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
        orderItems: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            quantity: number;
            orderId: number;
            productId: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            rating: number;
            text: string;
            userId: number;
            productId: number;
        }[];
        generation: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
            chassis: string;
            engine: string;
            engineVolume: string;
            yearFrom: string;
            yearTo: string;
            modelId: number;
        }[];
        category: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
        };
        manufacture: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            slug: string;
            image: string;
        };
        user: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            phone: string;
            password: string;
            isAdmin: boolean;
            name: string;
            surname: string;
            middleName: string;
            avatarPath: string;
        };
        _count: {
            orderItems: number;
            reviews: number;
            generation: number;
            category: number;
            manufacture: number;
            user: number;
        };
    }[]>;
    createProduct(productDto: ProductDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
    }>;
    createManyProducts(productDto: ProductDto[]): Promise<import(".prisma/client").Prisma.BatchPayload>;
    updateProduct(id: string, dto: ProductDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
    }>;
    deleteProduct(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        slug: string;
        sku: string;
        description: string;
        price: number;
        images: string[];
        inStock: boolean;
        discount: number;
        discountedPrice: number;
        universal: boolean;
        categoryId: number;
        manufactureId: number;
        userId: number;
    }>;
}
export {};
